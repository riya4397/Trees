import java.util.*;
public class orders_tree {
    
                
    
    static class Node{
        double data;
        Node left, right;
        Node(double data){
            this.data = data;
            left = null;
            right = null;
        }
    }
    
    public static void postorder(Node root){
        if(root != null){
            postorder(root.left);
            postorder(root.right);
            System.out.println(root.data);
        }        
    }
    
    public static void postorderI(Node root){
        Stack<Node> stack = new Stack<Node>();
        while(root != null){
            stack.push(root);
            root = root.left;
        }
        while(stack.size() > 0){
            Node temp = stack.peek();
            if(temp.right != null){
                Node tt = temp.right;
                temp.right = null;
                while(tt != null){
                    stack.push(tt);
                    tt = tt.left;
                }
            }
            else{
                System.out.println(temp.data);
                stack.pop();
            }
        }
    }
    
    
    public static void preorder(Node root){
        if(root != null){
            System.out.println(root.data);
            preorder(root.left);
            preorder(root.right);
        }        
    }
    
    public static void preorderI(Node root){
        Stack<Node> stack = new Stack<Node>();
        while(root != null){
            System.out.println(root.data);
            stack.push(root);
            root = root.left;
        }
        while(stack.size() > 0){
            Node temp = stack.pop();
            if(temp.right != null){
                temp = temp.right;
                while(temp != null){
                    System.out.println(temp.data);
                    stack.push(temp);
                    temp = temp.left;
                }
            }
        }
    }
    
    public static void inorder(Node root){
        if(root != null){
            inorder(root.left);
            System.out.println(root.data);
            inorder(root.right);
        }        
    }
    
    public static void inorderI(Node root){
        Stack<Node> stack = new Stack<Node>();
        while(root != null){
            stack.push(root);
            root = root.left;
        }
        while(stack.size() > 0){
            Node temp = stack.pop();
            System.out.println(temp.data);
            if(temp.right != null){
                temp = temp.right;
                while(temp != null){
                    stack.push(temp);
                    temp = temp.left;
                }
            }
        }
    }
    
    public static void main(String args[]){
        Scanner scan = new Scanner(System.in);
        
        Node root = new Node(12);
        root.left = new Node(7);
        root.right = new Node(14);
        root.left.left = new Node(5);
        root.left.right = new Node(9);
        root.right.right = new Node(18);
        root.right.left = new Node(13);
        root.left.right.left = new Node(8);
        root.left.right.right = new Node(10);
        root.left.right.left.right = new Node(8.5);
        root.right.right.left = new Node(16);
        root.right.right.right = new Node(21);
        root.right.right.left.left = new Node(15);
        root.right.right.left.right = new Node(17);
        
        postorderI(root);
    }
    
}
